local DebugMode = false
local Emulator = false

if not game.IsLoaded then game.Loaded:Wait() end

local ScriptContext = game:FindService("ScriptContext"); ScriptContext:SetTimeout(2.5)
local LocalPlayer = game:FindService("Players").LocalPlayer

local GetInfo = getinfo or debug.getinfo

local ClientTable = nil
local Detectors = { "indexInstance", "newindexInstance", "namecallInstance", "indexEnum", "namecallEnum", "eqEnum", }
local FoundSend = false

local DInfo; DInfo = hookfunction(debug.info, newcclosure(function(SOF, Options)
    if checkcaller() then return DInfo(SOF, Options) end
    
    SOF = type(SOF) == "number" and SOF+1 or SOF
    
    if getcallingscript().Name == "ClientMover" then
        if DebugMode then warn(string.format("Debug.Info Function Has Been Called!\nPassed Arguments: %s %s\n", tostring(SOF), tostring(Options))) end
        if typeof(SOF) == "function" then
            local Name = DInfo(SOF, "n")
            if Name == "" and Options == "slanf" then
                return coroutine.yield()
            end
        end
        return
    end
    return DInfo(SOF, Options)
end))

local LPKick; LPKick = hookfunction(LocalPlayer.Kick, newcclosure(function(Player, Reason)
    if checkcaller() then return LPKick(Player,Reason) end
    if getcallingscript().Name == "ClientMover" and Player == LocalPlayer then
        if DebugMode then warn(string.format("LocalPlayer Kick Function Has Been Called!\nPassed Arguments: %s\n", tostring(Reason))) end
        return
    end
    return LPKick(Player, Reason)
end))

for _, Collected in getgc(true) do
    if typeof(Collected) == "function" then
        local Name, Source = debug.info(Collected, "ns")
        
        if Source:find(".Client.Core.Anti") then
            if Name == "compareTables" then
                hookfunction(Collected, function(Table1, Table2)
                    if DebugMode then warn(string.format("Compare Tables Function Has Been Called!\nPassed Arguments: %s %s\n", tostring(Table1), tostring(Table2))) end
                    return true
                end)
            elseif Name == "isMethamethodValid" then
                hookfunction(Collected, function(Metamethod)
                    if DebugMode then warn(string.format("Is Metamethod Vaild Function Has Been Called!\nPassed Arguments: %s\n", tostring(Metamethod))) end
                    return true
                end)
            elseif Name == "checkStack" then
                hookfunction(Collected, function(Method)
                    if DebugMode then warn(string.format("Check Stack Function Has Been Called!\nPassed Arguments: %s\n", tostring(Method))) end
                    return false
                end)
            end
        elseif Source:find(".Client.Client") then
            local Upvalues = debug.getupvalues(Collected)
            if #Upvalues == 3 then
                local Functions = {}
                for _, Value in Upvalues do
                    if typeof(Value) ~= "function" then continue end
                    local Info = GetInfo(Value)
                    if Info.name == "" or Info.name == "tostring" or Info.name == "logError" then
                        table.insert(Functions, Value)
                    end
                end
                if #Functions ~= 3 then continue end
                hookfunction(Collected,function(...)end)
            end
        end
    end
    
    if typeof(Collected) == "table" then
        local Detected = rawget(Collected, "Detected")
        local Disconnect = rawget(Collected, "Disconnect")
        local Kill = rawget(Collected, "Kill")
        local Send = rawget(Collected, "Send")
        local DepsName = rawget(Collected, "DepsName")
        
        if DepsName then
            ClientTable = Collected
        end
        
        if Emulator and typeof(Send) == "function" and not FoundSend then
            local Info = GetInfo(Send)
            local Path = Info and Info.short_src
            
            if Path and Path:find(".Client.Core.Remote") then
                FoundSend = true
                task.spawn(function()
                    if DebugMode then warn("Starting To Emulate Remote Sending...\n") end
                    while true do
                       if typeof(ClientTable) ~= "table" then task.wait() continue end
                       Send("ClientCheck", {
                            Sent = ClientTable.Remote.Sent or 0,
                            Received = ClientTable.Remote.Received,
                        }, ClientTable.DepsName)
                        if DebugMode then warn("Emulator: Fired Remote Client Check To Server!\n") end
                        task.wait(15)
                    end
                end)
            end
        end
        
        if Disconnect and typeof(Disconnect) == "function" then
            local Info = GetInfo(Disconnect)
            local Path = Info and Info.short_src
            
            if Path and Path:find(".Client.Client") then
                hookfunction(Disconnect, function(Info)
                    if DebugMode then warn(string.format("Disconnect Function Has Been Called!\nPassed Arguments: %s\n", tostring(Info))) end
                    return
                end)
            end
        end
        
        if Kill and typeof(Kill) == "function" then
            local Info = GetInfo(Kill)
            local Path = Info and Info.short_src
            if Path and Path:find(".Client.Client") or Path:find("ClientMover") then
                hookfunction(Kill, function(Info)
                    if DebugMode then warn(string.format("Kill Function Has Been Called!\nPassed Arguments: %s\n", tostring(Info))) end
                    return
                end)
            end
        end
        
        if Detected and typeof(Detected) == "function" then
            local Info = GetInfo(Detected)
            local Path = Info and Info.short_src
            
            if Path and Path:find(".Client.Core.Anti") then
                hookfunction(Detected, function(Action, Info, NoCrash) -- Action, Info, NoCrash
                    if DebugMode then warn(string.format("Detected Function Has Been Called!\nPassed Arguments: %s %s %s\n", tostring(Action), tostring(Info), tostring(NoCrash))) end
                    return true
                end)
            end
        end
        
        for _, Method in Detectors do
            local Detector = rawget(Collected, Method)
            if not Detector or typeof(Detector) ~= "table" then continue end
            local DFunction = rawget(Detector, 2)
            if typeof(DFunction) ~= "function" then continue end
            hookfunction(DFunction, function()
                if DebugMode then warn(string.format("%s Function Has Been Called!\n", Method)) end
                return false
            end)
        end
    end
end
